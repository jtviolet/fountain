service: fireeye-hackathon-2020
provider:
  name: aws
  profile: delta12-ops-admin
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  memorySize: 256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - ses:SendRawEmail
      Resource: "*"
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-west-2:664974833211:secret:hackathon/dev/db/admin-OIdMUq"
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-west-2:664974833211:secret:hackathon/dev/admin-user-HOnYgZ"
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-west-2:664974833211:secret:hackathon/dev/ses-email-verification-credentials-5pprsI"
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-west-2:664974833211:secret:hackathon/dev/jwt-secret-HdoAl2"
  vpc:
    securityGroupIds:
      - Ref: LambdaSecurityGroup
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
custom:
  dbCredentials: ${ssm:/aws/reference/secretsmanager/hackathon/dev/db/admin~true}
functions:
  app:
    handler: app/app.handler
    events: 
      - http: 
          path: /
          method: ANY
          cors: true
      - http: 
          path: /{proxy+}
          method: ANY
          cors: true
resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
           - 0
           - Fn::GetAZs: ""
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: false
        VpcId:
          Ref: Vpc
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
           - 1
           - Fn::GetAZs: ""
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: false
        VpcId:
          Ref: Vpc

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
           - 0
           - Fn::GetAZs: ""
        CidrBlock: 10.0.21.0/24
        MapPublicIpOnLaunch: true
        VpcId:
          Ref: Vpc

    LambdaSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-lambda
        GroupDescription: Allow all outbound traffic, no inbound
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 127.0.0.1/32
        VpcId:
          Ref: Vpc

    DbSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-db
        GroupDescription: Allow local inbound to port 27017, no outbound
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: tcp
            FromPort: 27017
            ToPort: 27017
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 127.0.0.1/32
        VpcId:
          Ref: Vpc
    DbSubnetGroup:
      Type: "AWS::DocDB::DBSubnetGroup"
      Properties:
        DBSubnetGroupName: ${self:service}-${self:provider.stage}
        DBSubnetGroupDescription: Private database subnet group
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
    DatabaseCluster:
      Type: AWS::DocDB::DBCluster
      Properties: 
        BackupRetentionPeriod: 1
        DBClusterIdentifier: ${self:service}-${self:provider.stage}
        MasterUsername: ${self:custom.dbCredentials.username}
        MasterUserPassword: ${self:custom.dbCredentials.password}
        StorageEncrypted: true
        DBSubnetGroupName:
          Ref: DbSubnetGroup
        VpcSecurityGroupIds:
          - Ref: DbSecurityGroup
    DatabaseInstance:
      Type: "AWS::DocDB::DBInstance"
      DependsOn: DatabaseCluster
      Properties:
        AutoMinorVersionUpgrade: true
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
        DBClusterIdentifier: ${self:service}-${self:provider.stage}
        DBInstanceClass: "db.r5.large"
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}-01
        PreferredMaintenanceWindow: "sat:06:54-sat:07:24"

    Eip:
      Type: AWS::EC2::EIP
      DependsOn: Vpc
      Properties:
        Domain: vpc
    NatGateway:
      Type: AWS::EC2::NatGateway
      DependsOn: Eip
      Properties:
        AllocationId:
          Fn::GetAtt:
            - Eip
            - AllocationId
        SubnetId:
          Ref: PublicSubnet1
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
    SubnetRouteTableAssociationPrivate1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet1
        RouteTableId:
          Ref: PrivateRouteTable
    SubnetRouteTableAssociationPrivate2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet2
        RouteTableId:
          Ref: PrivateRouteTable

    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTableAssociationPublic1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet1
        RouteTableId:
          Ref: PublicRouteTable
    